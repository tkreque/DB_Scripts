USE [DBA]
GO

---- QUERY FOR BACKUP ALERT----
SELECT db.name AS [DATABASE]
		,'BACKUP LOG' AS [TYPE]
		,COALESCE(CONVERT(VARCHAR(12), DATEDIFF(HOUR,MAX(bs.backup_finish_date),GETDATE()), 101),'NONE') AS [LASTBACKUPHOURS]
	FROM sys.databases db 
		LEFT OUTER JOIN msdb.dbo.backupset bs
			ON bs.database_name = db.name
			AND bs.type = 'L'
	WHERE DATABASEPROPERTYEX(db.name, 'Status') = 'ONLINE'
		AND db.database_id > 4
		AND db.name <> 'DBA'
		AND db.recovery_model_desc in ('BULK LOGGED', 'FULL')
	GROUP BY db.name
		UNION ALL
		SELECT  db.name
		,'BACKUP FULL E DIFF'
		,COALESCE(CONVERT(VARCHAR(12), DATEDIFF(HOUR,MAX(bs.backup_finish_date),GETDATE()), 101),'NONE')
		FROM sys.databases db 
			LEFT OUTER JOIN msdb.dbo.backupset bs
				ON bs.database_name = db.name
				AND bs.type IN ('I', 'D')
		WHERE DATABASEPROPERTYEX(db.name, 'Status') = 'ONLINE'
			AND db.database_id > 4
			AND db.name <> 'DBA'
		GROUP BY db.name
GO

---- QUERY FOR LOGIN FAIL ALERT ----
SELECT TOP 100 *
FROM DBA.dbo.DBA_CONSULTALOGINFAIL
WHERE DATA >= CONVERT (VARCHAR(20), GETDATE() -1, 112)
GO

---- QUERY FOR CORRUPTED PAGES ALERT ----
SELECT * 
FROM msdb.dbo.suspect_pages 
WHERE last_update_date BETWEEN GETDATE() - 1 AND GETDATE()
GO

---- QUERY FOR DEADLOCKS ALERT ----	
SELECT *
	FROM DBA.dbo.DBA_CONSULTADEADLOCKS 
	WHERE DATA >= CONVERT (VARCHAR(20), GETDATE() -1, 112)

	
---- QUERY FOR DBA JOBS ALERT ----	
SELECT 
		   CONVERT(VARCHAR(50), JOB) AS JOB, 	   	   
		   CONVERT(VARCHAR(9), CONVERT(VARCHAR, HORAS + ((MINUTOS + (SEGUNDOS / 60)) / 60)) + ':' + 	
				REPLICATE('0', 2 - LEN(CONVERT(VARCHAR, (MINUTOS + (SEGUNDOS / 60)) - (((MINUTOS + (SEGUNDOS / 60)) / 60) * 60)))) + CONVERT(VARCHAR, (MINUTOS + (SEGUNDOS / 60)) - (((MINUTOS + (SEGUNDOS / 60)) / 60) * 60)) + ':' +
				REPLICATE('0', 2 - LEN(CONVERT(VARCHAR, SEGUNDOS - ((SEGUNDOS / 60) * 60)))) + CONVERT(VARCHAR, SEGUNDOS - ((SEGUNDOS / 60) * 60))) AS TEMPO_TOTAL, 	   
		   CONVERT(VARCHAR(19), ULTIMO_HORARIO, 108) AS ULTIMO_HORARIO,
		   CONVERT(VARCHAR(5), NRO_EXECUCOES) AS NRO_EXECUCOES,
		   CONVERT(VARCHAR(10), CASE WHEN RUN_STATUS <> NRO_EXECUCOES THEN CONVERT(VARCHAR, NRO_EXECUCOES - RUN_STATUS) + ' Falhas' ELSE 'Sucesso' END) AS RUN_STATUS
	FROM(SELECT JB.NAME AS JOB, 
				SUM(CONVERT(INT, REPLICATE('0', 2 - LEN(CONVERT(VARCHAR, JH.RUN_DURATION / 10000)))     + CONVERT(VARCHAR, JH.RUN_DURATION / 10000))) AS HORAS,
				SUM(CONVERT(INT, REPLICATE('0', 2 - LEN(CONVERT(VARCHAR, JH.RUN_DURATION / 100 % 100))) + CONVERT(VARCHAR, JH.RUN_DURATION / 100 % 100))) AS MINUTOS,
				SUM(CONVERT(INT, REPLICATE('0', 2 - LEN(CONVERT(VARCHAR, JH.RUN_DURATION % 100))) + CONVERT(VARCHAR, JH.RUN_DURATION % 100))) AS SEGUNDOS,		  									    		    
				MAX(CONVERT(DATETIME, DBA.dbo.udf_convert_int_time_to_datetime(JH.run_time, JH.RUN_DATE), 103)) ULTIMO_HORARIO, 
				SUM(JH.RUN_STATUS) AS RUN_STATUS,
				COUNT(1) AS NRO_EXECUCOES
		 FROM MSDB.DBO.SYSJOBS JB WITH(NOLOCK)
			  INNER JOIN MSDB.DBO.SYSJOBHISTORY JH WITH(NOLOCK)
		 		 ON JH.JOB_ID = JB.JOB_ID
		 WHERE CONVERT(DATETIME, DBA.dbo.udf_convert_int_time_to_datetime(JH.run_time, JH.RUN_DATE), 103) > GETDATE() -1
		   AND JB.ENABLED = 1
		   AND JH.STEP_ID = 0	   
		   and JH.run_time is not null
		   and JH.RUN_DATE is not null
		   and JB.name like '%DBA%'
		 GROUP BY JB.NAME) AS TBL
	ORDER BY TEMPO_TOTAL DESC
	